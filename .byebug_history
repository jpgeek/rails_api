c
response_json['user']
valid_attributes.merge(new_attributes).stringify_keys
 valid_attributes.merge(new_attributes)
valid_attributes
valid_attributes.merge(new_attributes)
c
valid_attributes.merge(new_attributes)
valid_attributes
new_attributes
c
response_json
c
@user
@user.assign_attributes(user_params)
@user
c
@user.(user_params)
@user.update(user_params).to_sql
params
user_params
c
response_json
c
response_json
c
response_json
c
response_json
c
response_json
response_json['error']
c
@user.valid?
n
c
response.successful?
response_json
c
response_json['user']
response_json['user]
response_json
c
response_json
c
bt
c
instance_variable_get("@#{resource_name}".to_sym)
n
exit
"PotatoChips".singularize.underscore
"PotatoChips".underscore
"PotatoChip".underscore
"PotatoChip".methods.grep /under/
"PotatoChip".methods.grep /snake/
"PotatoChip".to_snake
"PotatoChip".snake
"PotatoChip".snake_case
'foo:bar'.split('::')
'foo::bar'.split('::')
request.controller_class.name.split('::').last.gsub('Controller','').downcase.singularize
request.methods.grep /name/
request.methods.grep /model/
request.methods
request.controller_class.name.split('::').last.gsub('Controller','').downcase.singularize
request.controller_class.name.split('::').last.gsub('Controller','').downcase
request.controller_class.name.split('::').last.gsub('Controller','')
request.controller_class.name.split('::').last
request.controller_class.name.split('::')
request.controller_class.name
request.controller_class.split('::')
request.controller_class
request.controller
request.methods.controller
request.methods
request
current_controller
controller
request
c
method(:authorize_resource).source_location
c
response_json['users'].count
response_json
response_json.count
c
response_json
c
User.count
user
User.count
c
@user.reload
@user.destroy
@user
c
n
s
n
s
c
method(:render).source_location
c
user
n
User.create!(first_name: 'Bob', last_name: 'Jones', email: 'bob.jones@example.com', password: 'sekret')
user = User.last
User.create(first_name: 'Bob', last_name: 'Jones', email: 'bob.jones@example.com')
c
User.all
User.all.pluck(:email)
params[:email]
User.find_by(email: params[:email])
user
n
c
decoded_token[2]
decoded_token[1]
decoded_token[0]
decoded_token
decoded_token[1]['user_id']
User.find(decoded_token[1]['user_id']
c
payload
payload['user_id']
c
payload[:user_id]
payload
c
JSON.parse(Base64.decode64(token.split('.')[1]))
JSON.decode(Base64.decode64(token.split('.')[1]))
Base64.decode64(token.split('.')[1])
Base64.decode64(token.split('.')[1]).to_json
Base64.decode64(token.split('.')[1]).to_h
Base64.decode64(token.split('.')[1])
payload
c
json
c
json
c
json
c
json
c
JSON.parse(response.body)
c
request.format
params
c
params[:email]
params
c
request.content_type
request.format
request
params[:email]
params
c
params.keys
params[:email]
parms[:email]
params
c
params[:password]
params
c
request.parameters
request.methods
request
_wrap_parameters(:login)
_wrap_parameters(params)
_wrap_parameters
wrap_parameters
params
c
params[:login]
params
c
params[:_json]
params.keys
params[:json]
params
c
post(path, params: json, as: :json)
method(:post).source_location
methods(:post).source_location
methods(:post)
post(path, body: json, as: :json)
post(path, json, as: :json)
json
path
c
params
c
JSON.parse(response.body)
JSON.parse(response.body)['token']
c
n
c
response_json
n
c
response.body
json
n
c
response.body
response
n
c
s
c
p method
s
c
e
s
n
s
c
n
s
method
n
s
